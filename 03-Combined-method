import numpy as np

def test_function(x):
    return (x - 3) * (x - 1)**2

def derivative_test_function(x):
    return (x - 1)**2 + 2 * (x - 3) * (x - 1)

def hybrid_solver(func, derivative, initial_point, tolerance=1e-6, max_iterations=100):
    x_n = initial_point
    iteration = 0

    while iteration < max_iterations:
        # Bisection step
        a, b = x_n - 0.1, x_n + 0.1  # You can adjust the interval size
        if func(a) * func(b) < 0:
            x_bisect = (a + b) / 2
            # Newton's method step
            x_newton = x_n - func(x_n) / derivative(x_n)

            # Check if Newton's method result is within the bisection interval
            if a <= x_newton <= b:
                x_n = x_newton
            else:
                x_n = x_bisect

            # Check for convergence
            if abs(func(x_n)) < tolerance:
                return x_n, iteration

        iteration += 1

    raise ValueError("Hybrid method did not converge within the specified number of iterations.")

# Test the hybrid solver with different initial points
initial_points = [2, -2, -1]

for point in initial_points:
    solution, iterations = hybrid_solver(test_function, derivative_test_function, point)
    print(f"Initial Point: {point}, Root: {solution}, Iterations: {iterations}")
